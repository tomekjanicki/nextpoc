namespace Next.WTR.Web.Infrastructure.Security
{
    using System.Collections.Generic;
    using Next.WTR.Common.Web.Infrastructure.Security.Interface;
    using Next.WTR.Logic;
    using Next.WTR.Types;

    public sealed class AccessConfigurationMapProvider : IAccessConfigurationMapProvider
    {
        private static readonly Dictionary<NonEmptyLowerCaseString, IReadOnlyCollection<NonEmptyLowerCaseString>> Dictionary;

        static AccessConfigurationMapProvider()
        {
            var anonymous = new List<NonEmptyLowerCaseString>();
            var projectManagerOnly = new List<NonEmptyLowerCaseString> { (NonEmptyLowerCaseString)Constants.Roles.ProjectManager };

            Dictionary = new Dictionary<NonEmptyLowerCaseString, IReadOnlyCollection<NonEmptyLowerCaseString>>
            {
                { (NonEmptyLowerCaseString)"api/version/get", anonymous },
                { (NonEmptyLowerCaseString)"login/show", anonymous },
                { (NonEmptyLowerCaseString)"login/post", anonymous },
                { (NonEmptyLowerCaseString)"projecttask/show", projectManagerOnly },
                { (NonEmptyLowerCaseString)"projecttask/getprojecttaskspaged", projectManagerOnly },
                { (NonEmptyLowerCaseString)"projecttask/updatetasks", projectManagerOnly },
<<<<<<< HEAD
                { (NonEmptyLowerCaseString)"projecttasklogbrowse/show", projectManagerOnly },
                { (NonEmptyLowerCaseString)"projecttasklogbrowse/getprojecttaskslogpaged", projectManagerOnly },
=======
                { (NonEmptyLowerCaseString)"projecttaskbrowse/show", projectManagerOnly },
                { (NonEmptyLowerCaseString)"projecttaskbrowse/getprojecttaskspaged", projectManagerOnly },
>>>>>>> add public backend api
            };
        }

        public IReadOnlyDictionary<NonEmptyLowerCaseString, IReadOnlyCollection<NonEmptyLowerCaseString>> Get()
        {
            return Dictionary;
        }
    }
}
